name: FastAPI with cloudflared

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  run-fastapi-cloudflared:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: true  # needed to push changes

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn
          pip install --upgrade firebase-admin
          pip install python-dotenv

      - name: Decode Firebase Service Account Key
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | base64 -d > serviceAccountKey.json
        shell: bash

      - name: Download cloudflared
        run: |
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared-linux-amd64
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared

      - name: Start FastAPI and cloudflared tunnel
        id: start_services
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./serviceAccountKey.json
          FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
        run: |
          nohup uvicorn main:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          nohup cloudflared tunnel --url http://127.0.0.1:8000 > cloudflared.log 2>&1 &
          sleep 10
          URL=$(grep -o 'https://[-a-z0-9]*\.trycloudflare.com' cloudflared.log | head -1)
          echo "Tunnel URL is $URL"
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Update README.md with full content
        run: |
          README=README.md
          TUNNEL_URL="${{ steps.start_services.outputs.url }}"
          cat << 'EOF' > "$README"
# free python backend that runs forever yippee üéâ

Welcome to this free Python backend powered by FastAPI and Firebase, designed to run indefinitely using Cloudflared for public access! üöÄ This project showcases a simple yet powerful setup for hosting a backend service with automatic deployment via GitHub Actions.

## Current Link üåê
Current Link : $TUNNEL_URL

## Overview üåü

This backend leverages:
- **FastAPI** for building the API.
- **Firebase** (Firestore) for data storage.
- **Cloudflared** to expose the local server to the internet.
- **GitHub Actions** for continuous deployment and hosting.

The service runs forever on push to the `master` branch, with previous runs canceled to ensure only the latest instance is active.

## Prerequisites üõ†Ô∏è

- Python 3.11
- GitHub account with repository access
- Firebase project with Firestore enabled
- Cloudflared installed (handled automatically in the workflow)

## Setup Instructions üìã

1. **Clone the Repository**
   ```bash
   git clone https://github.com/<your-username>/<your-repo>.git
   cd <your-repo>
   ```

2. **Install Dependencies**
   ```bash
   python -m pip install --upgrade pip
   pip install fastapi uvicorn firebase-admin python-dotenv
   ```

3. **Configure Firebase**
   - Create a Firebase project at [Firebase Console](https://console.firebase.google.com/).
   - Enable Firestore and generate a service account key:
     - Go to **Project Settings** > **Service Accounts** > **Generate New Private Key**.
     - Save the JSON file as `serviceAccountKey.json` in the project root.
   - Base64-encode the key for GitHub Secrets:
     ```powershell
     [Convert]::ToBase64String([IO.File]::ReadAllBytes("serviceAccountKey.json"))
     ```

4. **Set Up GitHub Secrets**
   - In your GitHub repository, go to **Settings** > **Secrets and variables** > **Actions**.
   - Add the following secrets:
     - `FIREBASE_SERVICE_ACCOUNT_KEY`: The base64-encoded `serviceAccountKey.json`.

5. **Create `.env` (Local Only)**
   - Create a `.env` file in the project root:
     ```env
     GOOGLE_APPLICATION_CREDENTIALS=serviceAccountKey.json
     ```
   - Add `.env` to `.gitignore`.

## Usage üöÄ

- **Local Development**
  - Run the backend:
    ```bash
    uvicorn main:app --host 127.0.0.1 --port 8000
    ```
  - Access it at `http://127.0.0.1:8000`.

- **GitHub Actions Deployment**
  - Push changes to the `master` branch.
  - The workflow will start the backend and expose it via Cloudflared.


## Contributing ü§ù

Feel free to fork this repository, submit issues, or send pull requests! Let‚Äôs make this backend even better together.

## License üìú

This project is open-source under the MIT License. See the [LICENSE](LICENSE) file for details.
EOF
          # Replace the placeholder with the actual URL
          sed -i "s|\$TUNNEL_URL|$TUNNEL_URL|" "$README"
          echo "=== README.md snippet ==="
          cat "$README"

      - name: Commit and push README update
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git diff --cached --quiet || git commit -m "Update README with current Cloudflared tunnel link [skip ci]"
          git push

      - name: Output tunnel URL
        run: echo "Tunnel is running at ${{ steps.start_services.outputs.url }}"

      - name: Debug FastAPI logs
        run: |
          echo "=== FastAPI (uvicorn) logs ==="
          tail -n 50 uvicorn.log || echo "uvicorn.log not found"

      - name: Debug cloudflared logs
        run: |
          echo "=== cloudflared logs ==="
          tail -n 50 cloudflared.log || echo "cloudflared.log not found"

      - name: Keep workflow alive with cancellation support
        run: |
          echo "Keeping workflow alive. Press Ctrl+C to stop."
          trap "echo 'Termination signal received. Exiting...'; exit 0" SIGINT SIGTERM
          while true; do
            sleep 10
          done
        shell: bash