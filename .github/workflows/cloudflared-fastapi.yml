name: FastAPI with cloudflared

# Trigger this workflow when there's a push to the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - master

# Ensure only one workflow run per branch at a time; cancel in-progress if a new run starts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  run-fastapi-cloudflared:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code so we can work with it
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: true  # Needed to push back changes (like README.md updates)

      # Step 2: Setup Python 3.11 environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Install Python dependencies for FastAPI, Firebase admin SDK, and dotenv
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn
          pip install --upgrade firebase-admin
          pip install python-dotenv

      # Step 4: Decode the Firebase service account key from a base64 secret and save it as a JSON file
      - name: Decode Firebase Service Account Key
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | base64 -d > serviceAccountKey.json
        shell: bash

      # Step 5: Download and install cloudflared (Cloudflare Tunnel CLI)
      - name: Download cloudflared
        run: |
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared-linux-amd64
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared

      # Step 6: Start FastAPI app and cloudflared tunnel in the background, then extract the public tunnel URL
      - name: Start FastAPI and cloudflared tunnel
        id: start_services
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./serviceAccountKey.json
          FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
        run: |
          nohup uvicorn main:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          nohup cloudflared tunnel --url http://127.0.0.1:8000 > cloudflared.log 2>&1 &
          sleep 10
          URL=$(grep -o 'https://[-a-z0-9]*\.trycloudflare.com' cloudflared.log | head -1)
          echo "Tunnel URL is $URL"
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Export tunnel URL environment variable
        run: echo "CLOUDFLARED_TUNNEL_URL=${{ steps.start_services.outputs.url }}" >> $GITHUB_ENV

      - name: Run Firestore update script with tunnel URL
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./serviceAccountKey.json
          CLOUDFLARED_TUNNEL_URL: ${{ env.CLOUDFLARED_TUNNEL_URL }}
        run: python updateDb.py


      # Step 7: Update README.md file with the current Cloudflared tunnel link
      - name: Update README.md with current tunnel link
        run: |
          README=README.md
          LINK="Current Link : ${{ steps.start_services.outputs.url }}"
          if [ -f "$README" ]; then
            # If README contains a previous link line, replace it; else append it at the end
            if grep -q '^Current Link :' "$README"; then
              sed -i "s|^Current Link :.*|$LINK|" "$README"
            else
              echo -e "\n$LINK" >> "$README"
            fi
          else
            # If README doesn't exist, create it with a title and the link
            echo -e "# free python backend that runs forever yippee ðŸŽ‰\n\n$LINK" > "$README"
          fi
          echo "=== README.md snippet ==="
          grep -A 3 'Current Link :' "$README" || cat "$README"

      # Step 8: Commit and push README.md changes back to the repo
      - name: Commit and push README update
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          # Commit only if there are changes staged
          git diff --cached --quiet || git commit -m "Update README with current Cloudflared tunnel link [skip ci]"
          git push

      # Step 9: Output the tunnel URL for logs or downstream usage
      - name: Output tunnel URL
        run: echo "Tunnel is running at ${{ steps.start_services.outputs.url }}"

      # Step 10: Display the last 50 lines of FastAPI (uvicorn) logs for debugging
      - name: Debug FastAPI logs
        run: |
          echo "=== FastAPI (uvicorn) logs ==="
          tail -n 50 uvicorn.log || echo "uvicorn.log not found"

      # Step 11: Display the last 50 lines of cloudflared logs for debugging
      - name: Debug cloudflared logs
        run: |
          echo "=== cloudflared logs ==="
          tail -n 50 cloudflared.log || echo "cloudflared.log not found"

      # Step 12: Keep the workflow alive indefinitely, with support for clean termination (Ctrl+C)
      - name: Keep workflow alive with cancellation support
        run: |
          echo "Keeping workflow alive. Press Ctrl+C to stop."
          trap "echo 'Termination signal received. Exiting...'; exit 0" SIGINT SIGTERM
          while true; do
            sleep 10
          done
        shell: bash
